Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 52.46      2.79     2.79   208643     0.00     0.00  mul_mo
 44.94      5.18     2.39 165784299     0.00     0.00  gte
  2.26      5.30     0.12   139715     0.00     0.00  highbit
  0.19      5.31     0.01   138731     0.00     0.00  half
  0.19      5.32     0.01    69296     0.00     0.00  subws
  0.00      5.32     0.00   138635     0.00     0.00  oddp
  0.00      5.32     0.00     1135     0.00     0.00  copy
  0.00      5.32     0.00      893     0.00     0.00  zero
  0.00      5.32     0.00      683     0.00     0.00  equ
  0.00      5.32     0.00      548     0.00     0.00  zerop
  0.00      5.32     0.00      542     0.00     0.00  load
  0.00      5.32     0.00      539     0.00     0.01  spow_nn
  0.00      5.32     0.00      310     0.00     0.00  addws
  0.00      5.32     0.00      270     0.00     0.00  subw
  0.00      5.32     0.00      256     0.00     0.00  i2osp
  0.00      5.32     0.00      256     0.00     0.00  os2ip
  0.00      5.32     0.00      128     0.00     0.01  rsa_dec
  0.00      5.32     0.00      128     0.00     0.01  rsa_enc
  0.00      5.32     0.00      125     0.00     0.00  evenp
  0.00      5.32     0.00       29     0.00     0.10  rabin_test
  0.00      5.32     0.00       16     0.00     0.00  sub_mo
  0.00      5.32     0.00        8     0.00     0.00  qdiv
  0.00      5.32     0.00        4     0.00     0.00  set
  0.00      5.32     0.00        2     0.00     1.40  load_miller_rabin
  0.00      5.32     0.00        2     0.00     0.00  mul
  0.00      5.32     0.00        1     0.00     0.00  euclid_inv
  0.00      5.32     0.00        1     0.00     2.80  genkeys
  0.00      5.32     0.00        1     0.00     0.00  print_num

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.19% of 5.32 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    5.32                 msgtest [1]
                0.00    2.80       1/1           genkeys [4]
                0.00    1.26     128/128         rsa_enc [9]
                0.00    1.26     128/128         rsa_dec [8]
                0.00    0.00       1/139715      highbit [10]
                0.00    0.00       1/1           print_num [29]
-----------------------------------------------
                0.00    1.26     128/539         rsa_enc [9]
                0.00    1.26     128/539         rsa_dec [8]
                0.00    2.79     283/539         rabin_test [5]
[2]     99.8    0.00    5.31     539         spow_nn [2]
                2.78    2.39  208185/208643      mul_mo [3]
                0.12    0.00  139174/139715      highbit [10]
                0.01    0.00  138635/138731      half [11]
                0.01    0.00   69011/69296       subws [12]
                0.00    0.00  138635/138635      oddp [17]
                0.00    0.00    1078/1135        copy [18]
                0.00    0.00     539/542         load [22]
                0.00    0.00     539/548         zerop [21]
-----------------------------------------------
                0.00    0.00      16/208643      euclid_inv [13]
                0.01    0.01     442/208643      rabin_test [5]
                2.78    2.39  208185/208643      spow_nn [2]
[3]     97.4    2.79    2.39  208643         mul_mo [3]
                2.39    0.00 165783162/165784299     gte [7]
-----------------------------------------------
                0.00    2.80       1/1           msgtest [1]
[4]     52.6    0.00    2.80       1         genkeys [4]
                0.00    2.80       2/2           load_miller_rabin [6]
                0.00    0.00       1/1           euclid_inv [13]
                0.00    0.00       2/69296       subws [12]
                0.00    0.00       7/893         zero [19]
                0.00    0.00       4/1135        copy [18]
                0.00    0.00       2/2           mul [28]
                0.00    0.00       1/542         load [22]
-----------------------------------------------
                0.00    2.80      29/29          load_miller_rabin [6]
[5]     52.6    0.00    2.80      29         rabin_test [5]
                0.00    2.79     283/539         spow_nn [2]
                0.01    0.01     442/208643      mul_mo [3]
                0.00    0.00     283/139715      highbit [10]
                0.00    0.00     283/69296       subws [12]
                0.00    0.00      96/138731      half [11]
                0.00    0.00     283/165784299     gte [7]
                0.00    0.00     683/683         equ [20]
                0.00    0.00     370/893         zero [19]
                0.00    0.00     283/310         addws [23]
                0.00    0.00     270/270         subw [24]
                0.00    0.00     125/125         evenp [26]
-----------------------------------------------
                0.00    2.80       2/2           genkeys [4]
[6]     52.6    0.00    2.80       2         load_miller_rabin [6]
                0.00    2.80      29/29          rabin_test [5]
                0.00    0.00      27/310         addws [23]
                0.00    0.00       4/4           set [27]
                0.00    0.00       2/893         zero [19]
                0.00    0.00       2/1135        copy [18]
-----------------------------------------------
                0.00    0.00      16/165784299     sub_mo [16]
                0.00    0.00     128/165784299     rsa_enc [9]
                0.00    0.00     128/165784299     rsa_dec [8]
                0.00    0.00     283/165784299     rabin_test [5]
                0.00    0.00     582/165784299     qdiv [15]
                2.39    0.00 165783162/165784299     mul_mo [3]
[7]     44.9    2.39    0.00 165784299         gte [7]
-----------------------------------------------
                0.00    1.26     128/128         msgtest [1]
[8]     23.7    0.00    1.26     128         rsa_dec [8]
                0.00    1.26     128/539         spow_nn [2]
                0.00    0.00     128/256         i2osp [14]
                0.00    0.00     128/165784299     gte [7]
                0.00    0.00     256/893         zero [19]
                0.00    0.00     128/256         os2ip [25]
-----------------------------------------------
                0.00    1.26     128/128         msgtest [1]
[9]     23.7    0.00    1.26     128         rsa_enc [9]
                0.00    1.26     128/539         spow_nn [2]
                0.00    0.00     128/256         i2osp [14]
                0.00    0.00     128/165784299     gte [7]
                0.00    0.00     256/893         zero [19]
                0.00    0.00     128/256         os2ip [25]
-----------------------------------------------
                0.00    0.00       1/139715      msgtest [1]
                0.00    0.00       1/139715      euclid_inv [13]
                0.00    0.00     256/139715      i2osp [14]
                0.00    0.00     283/139715      rabin_test [5]
                0.12    0.00  139174/139715      spow_nn [2]
[10]     2.3    0.12    0.00  139715         highbit [10]
-----------------------------------------------
                0.00    0.00      96/138731      rabin_test [5]
                0.01    0.00  138635/138731      spow_nn [2]
[11]     0.2    0.01    0.00  138731         half [11]
-----------------------------------------------
                0.00    0.00       2/69296       genkeys [4]
                0.00    0.00     283/69296       rabin_test [5]
                0.01    0.00   69011/69296       spow_nn [2]
[12]     0.2    0.01    0.00   69296         subws [12]
-----------------------------------------------
                0.00    0.00       1/1           genkeys [4]
[13]     0.0    0.00    0.00       1         euclid_inv [13]
                0.00    0.00      16/208643      mul_mo [3]
                0.00    0.00       8/8           qdiv [15]
                0.00    0.00       1/139715      highbit [10]
                0.00    0.00      16/16          sub_mo [16]
                0.00    0.00      51/1135        copy [18]
                0.00    0.00       9/548         zerop [21]
                0.00    0.00       2/542         load [22]
                0.00    0.00       2/893         zero [19]
-----------------------------------------------
                0.00    0.00     128/256         rsa_enc [9]
                0.00    0.00     128/256         rsa_dec [8]
[14]     0.0    0.00    0.00     256         i2osp [14]
                0.00    0.00     256/139715      highbit [10]
-----------------------------------------------
                0.00    0.00       8/8           euclid_inv [13]
[15]     0.0    0.00    0.00       8         qdiv [15]
                0.00    0.00     582/165784299     gte [7]
-----------------------------------------------
                0.00    0.00      16/16          euclid_inv [13]
[16]     0.0    0.00    0.00      16         sub_mo [16]
                0.00    0.00      16/165784299     gte [7]
-----------------------------------------------
                0.00    0.00  138635/138635      spow_nn [2]
[17]     0.0    0.00    0.00  138635         oddp [17]
-----------------------------------------------
                0.00    0.00       2/1135        load_miller_rabin [6]
                0.00    0.00       4/1135        genkeys [4]
                0.00    0.00      51/1135        euclid_inv [13]
                0.00    0.00    1078/1135        spow_nn [2]
[18]     0.0    0.00    0.00    1135         copy [18]
-----------------------------------------------
                0.00    0.00       2/893         euclid_inv [13]
                0.00    0.00       2/893         load_miller_rabin [6]
                0.00    0.00       7/893         genkeys [4]
                0.00    0.00     256/893         rsa_enc [9]
                0.00    0.00     256/893         rsa_dec [8]
                0.00    0.00     370/893         rabin_test [5]
[19]     0.0    0.00    0.00     893         zero [19]
-----------------------------------------------
                0.00    0.00     683/683         rabin_test [5]
[20]     0.0    0.00    0.00     683         equ [20]
-----------------------------------------------
                0.00    0.00       9/548         euclid_inv [13]
                0.00    0.00     539/548         spow_nn [2]
[21]     0.0    0.00    0.00     548         zerop [21]
-----------------------------------------------
                0.00    0.00       1/542         genkeys [4]
                0.00    0.00       2/542         euclid_inv [13]
                0.00    0.00     539/542         spow_nn [2]
[22]     0.0    0.00    0.00     542         load [22]
-----------------------------------------------
                0.00    0.00      27/310         load_miller_rabin [6]
                0.00    0.00     283/310         rabin_test [5]
[23]     0.0    0.00    0.00     310         addws [23]
-----------------------------------------------
                0.00    0.00     270/270         rabin_test [5]
[24]     0.0    0.00    0.00     270         subw [24]
-----------------------------------------------
                0.00    0.00     128/256         rsa_enc [9]
                0.00    0.00     128/256         rsa_dec [8]
[25]     0.0    0.00    0.00     256         os2ip [25]
-----------------------------------------------
                0.00    0.00     125/125         rabin_test [5]
[26]     0.0    0.00    0.00     125         evenp [26]
-----------------------------------------------
                0.00    0.00       4/4           load_miller_rabin [6]
[27]     0.0    0.00    0.00       4         set [27]
-----------------------------------------------
                0.00    0.00       2/2           genkeys [4]
[28]     0.0    0.00    0.00       2         mul [28]
-----------------------------------------------
                0.00    0.00       1/1           msgtest [1]
[29]     0.0    0.00    0.00       1         print_num [29]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2015 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [23] addws                  [22] load                    [9] rsa_enc
  [18] copy                    [6] load_miller_rabin      [27] set
  [20] equ                    [28] mul                     [2] spow_nn
  [13] euclid_inv              [3] mul_mo                 [16] sub_mo
  [26] evenp                  [17] oddp                   [24] subw
   [4] genkeys                [25] os2ip                  [12] subws
   [7] gte                    [29] print_num              [19] zero
  [11] half                   [15] qdiv                   [21] zerop
  [10] highbit                 [5] rabin_test
  [14] i2osp                   [8] rsa_dec
