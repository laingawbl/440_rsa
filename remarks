
func:
    - the program overall doesn't seem to put newlines in properly at the end of the files it writes out, but oh well.
    - gprof says the vast majority of the time is from calls to mm_redc, without child calls. examining the ELF using arm objdump
        bears out that all the function calls in mm_redc exept for memcpy have been inlined by -O3.
opt: 
    - i was able to get each call to mm_redc from 70ms down to 50ms by making the following change:
            acc <- long_mult(N', T)
            acc <- acc mod R
        into:
            acc <- half_mult(N', T)
    - if I want to get really serious I'll replace mult() itself with Karatsuba multiplication.
    - gprof now says that each call to mm_exp calls mm_redc approximately 4092 times, i.e., ~ 2 log_2(n) for 2048-bit n. this makes sense - each pass
      through the constant-time Montgomery ladder deals with one bit of the exponent, which is generally in the environment of 2047 - 2044 bits, and
      calls mm_mult() twice (once for T1 and T2).
      
      Literature indicates that exponentiation a^n generally has theta(log_2(n)) multiplication operations, so there's little i can do to improve beside
      replacing the Montgomery ladder with regular (non-constant-time) square and multiplying. the sliding-window method isn't suitable as you'd need to
      compute x^0, x^3, ..., x^2047 for each symbol x (i.e., each chunk of the text to be encrypted or decrypted)!
      
      so improvements will have to be made at the level of mult() and mm_redc().
    - i got this number down to ~3060 times. loop unrolling helped somewhat.
